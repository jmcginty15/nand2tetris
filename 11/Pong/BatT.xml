<tokens>
<identifier> class </identifier>
<identifier> Bat </identifier>
<symbol> { </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> width </identifier>
<symbol> , </symbol>
<identifier> height </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> direction </identifier>
<symbol> ; </symbol>
<identifier> constructor </identifier>
<identifier> Bat </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> Ax </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> Ay </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> Awidth </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> Aheight </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> Ax </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> Ay </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> width </identifier>
<symbol> = </symbol>
<identifier> Awidth </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> height </identifier>
<symbol> = </symbol>
<identifier> Aheight </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<identifier> this </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<identifier> this </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> true </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> hide </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> false </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> setDirection </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> Adirection </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> direction </identifier>
<symbol> = </symbol>
<identifier> Adirection </identifier>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> int </identifier>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> return </identifier>
<identifier> x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> int </identifier>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> return </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> setWidth </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> Awidth </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> hide </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> width </identifier>
<symbol> = </symbol>
<identifier> Awidth </identifier>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> false </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> true </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 511 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<integerConstant> 511 </integerConstant>
<symbol> - </symbol>
<identifier> width </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> false </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> true </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 3 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>