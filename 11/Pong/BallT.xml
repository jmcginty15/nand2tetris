<tokens>
<identifier> class </identifier>
<identifier> Ball </identifier>
<symbol> { </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> lengthx </identifier>
<symbol> , </symbol>
<identifier> lengthy </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> d </identifier>
<symbol> , </symbol>
<identifier> straightD </identifier>
<symbol> , </symbol>
<identifier> diagonalD </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> boolean </identifier>
<identifier> invert </identifier>
<symbol> , </symbol>
<identifier> positivex </identifier>
<symbol> , </symbol>
<identifier> positivey </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> leftWall </identifier>
<symbol> , </symbol>
<identifier> rightWall </identifier>
<symbol> , </symbol>
<identifier> topWall </identifier>
<symbol> , </symbol>
<identifier> bottomWall </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> wall </identifier>
<symbol> ; </symbol>
<identifier> constructor </identifier>
<identifier> Ball </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> Ax </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> Ay </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> AleftWall </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> ArightWall </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> AtopWall </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> AbottomWall </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> Ax </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> Ay </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> leftWall </identifier>
<symbol> = </symbol>
<identifier> AleftWall </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> rightWall </identifier>
<symbol> = </symbol>
<identifier> ArightWall </identifier>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> topWall </identifier>
<symbol> = </symbol>
<identifier> AtopWall </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> bottomWall </identifier>
<symbol> = </symbol>
<identifier> AbottomWall </identifier>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<identifier> this </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<identifier> this </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> true </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> hide </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> false </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> int </identifier>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> return </identifier>
<identifier> x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> int </identifier>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> return </identifier>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> destx </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> desty </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> , </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> lengthx </identifier>
<symbol> = </symbol>
<identifier> destx </identifier>
<symbol> - </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> lengthy </identifier>
<symbol> = </symbol>
<identifier> desty </identifier>
<symbol> - </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> lengthx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> lengthy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> invert </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> positivex </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &lt; </symbol>
<identifier> desty </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> positivey </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<identifier> destx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> positivex </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<identifier> destx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> positivey </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &lt; </symbol>
<identifier> desty </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> let </identifier>
<identifier> d </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<identifier> dy </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> dx </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> straightD </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> diagonalD </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> - </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> int </identifier>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> hide </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> d </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> d </identifier>
<symbol> = </symbol>
<identifier> d </identifier>
<symbol> + </symbol>
<identifier> straightD </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> d </identifier>
<symbol> = </symbol>
<identifier> d </identifier>
<symbol> + </symbol>
<identifier> diagonalD </identifier>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> positivey </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> positivex </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> invert </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &gt; </symbol>
<identifier> leftWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> leftWall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<identifier> rightWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> rightWall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &gt; </symbol>
<identifier> topWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> topWall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &lt; </symbol>
<identifier> bottomWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> bottomWall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> do </identifier>
<identifier> show </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<identifier> wall </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> bounce </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> bouncingDirection </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> newx </identifier>
<symbol> , </symbol>
<identifier> newy </identifier>
<symbol> , </symbol>
<identifier> divLengthx </identifier>
<symbol> , </symbol>
<identifier> divLengthy </identifier>
<symbol> , </symbol>
<identifier> factor </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> divLengthx </identifier>
<symbol> = </symbol>
<identifier> lengthx </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> divLengthy </identifier>
<symbol> = </symbol>
<identifier> lengthy </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> factor </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> lengthx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> lengthx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> factor </identifier>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> factor </identifier>
<symbol> = </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> newx </identifier>
<symbol> = </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> newy </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> divLengthy </identifier>
<symbol> * </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> divLengthx </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> newy </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> newy </identifier>
<symbol> * </symbol>
<identifier> factor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> newx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> newy </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> divLengthy </identifier>
<symbol> * </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> divLengthx </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> newy </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> newy </identifier>
<symbol> * </symbol>
<identifier> factor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> newy </identifier>
<symbol> = </symbol>
<integerConstant> 250 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> newx </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> divLengthx </identifier>
<symbol> * </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> divLengthy </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> newx </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> newx </identifier>
<symbol> * </symbol>
<identifier> factor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> newy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> newx </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> divLengthx </identifier>
<symbol> * </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> divLengthy </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> newx </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> newx </identifier>
<symbol> * </symbol>
<identifier> factor </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> do </identifier>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<identifier> newx </identifier>
<symbol> , </symbol>
<identifier> newy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>