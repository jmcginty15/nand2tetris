<tokens>
<identifier> class </identifier>
<identifier> PongGame </identifier>
<symbol> { </symbol>
<identifier> static </identifier>
<identifier> PongGame </identifier>
<identifier> instance </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> Bat </identifier>
<identifier> bat </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> Ball </identifier>
<identifier> ball </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> wall </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> boolean </identifier>
<identifier> exit </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> score </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> lastWall </identifier>
<symbol> ; </symbol>
<identifier> field </identifier>
<identifier> int </identifier>
<identifier> batWidth </identifier>
<symbol> ; </symbol>
<identifier> constructor </identifier>
<identifier> PongGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> clearScreen </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> batWidth </identifier>
<symbol> = </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> bat </identifier>
<symbol> = </symbol>
<identifier> Bat </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 230 </integerConstant>
<symbol> , </symbol>
<integerConstant> 229 </integerConstant>
<symbol> , </symbol>
<identifier> batWidth </identifier>
<symbol> , </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> ball </identifier>
<symbol> = </symbol>
<identifier> Ball </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 253 </integerConstant>
<symbol> , </symbol>
<integerConstant> 222 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 511 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 229 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 238 </integerConstant>
<symbol> , </symbol>
<integerConstant> 511 </integerConstant>
<symbol> , </symbol>
<integerConstant> 240 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 22 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Score: 0 </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> exit </identifier>
<symbol> = </symbol>
<identifier> false </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> score </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> lastWall </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> return </identifier>
<identifier> this </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<identifier> this </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> newInstance </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> instance </identifier>
<symbol> = </symbol>
<identifier> PongGame </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> function </identifier>
<identifier> PongGame </identifier>
<identifier> getInstance </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> return </identifier>
<identifier> instance </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> char </identifier>
<identifier> key </identifier>
<symbol> ; </symbol>
<identifier> while </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> while </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> moveBall </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> setDirection </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> setDirection </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 140 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> while </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> moveBall </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<integerConstant> 27 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Game Over </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> method </identifier>
<identifier> void </identifier>
<identifier> moveBall </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> bouncingDirection </identifier>
<symbol> , </symbol>
<identifier> batLeft </identifier>
<symbol> , </symbol>
<identifier> batRight </identifier>
<symbol> , </symbol>
<identifier> ballLeft </identifier>
<symbol> , </symbol>
<identifier> ballRight </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> wall </identifier>
<symbol> = </symbol>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<identifier> lastWall </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> lastWall </identifier>
<symbol> = </symbol>
<identifier> wall </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> batLeft </identifier>
<symbol> = </symbol>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> batRight </identifier>
<symbol> = </symbol>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> ballLeft </identifier>
<symbol> = </symbol>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> ballRight </identifier>
<symbol> = </symbol>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> wall </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> exit </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> batLeft </identifier>
<symbol> &gt; </symbol>
<identifier> ballRight </identifier>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> batRight </identifier>
<symbol> &lt; </symbol>
<identifier> ballLeft </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> ballRight </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<identifier> batLeft </identifier>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> ballLeft </identifier>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<identifier> batRight </identifier>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> bouncingDirection </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> let </identifier>
<identifier> batWidth </identifier>
<symbol> = </symbol>
<identifier> batWidth </identifier>
<symbol> - </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> bat </identifier>
<symbol> . </symbol>
<identifier> setWidth </identifier>
<symbol> ( </symbol>
<identifier> batWidth </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> score </identifier>
<symbol> = </symbol>
<identifier> score </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 22 </integerConstant>
<symbol> , </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> score </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> do </identifier>
<identifier> ball </identifier>
<symbol> . </symbol>
<identifier> bounce </identifier>
<symbol> ( </symbol>
<identifier> bouncingDirection </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>