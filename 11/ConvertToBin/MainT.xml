<tokens>
<identifier> class </identifier>
<identifier> Main </identifier>
<symbol> { </symbol>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> main </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> value </identifier>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> fillMemory </identifier>
<symbol> ( </symbol>
<integerConstant> 8001 </integerConstant>
<symbol> , </symbol>
<integerConstant> 16 </integerConstant>
<symbol> , </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> value </identifier>
<symbol> = </symbol>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> peek </identifier>
<symbol> ( </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> convert </identifier>
<symbol> ( </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> convert </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> int </identifier>
<identifier> mask </identifier>
<symbol> , </symbol>
<identifier> position </identifier>
<symbol> ; </symbol>
<identifier> var </identifier>
<identifier> boolean </identifier>
<identifier> loop </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> loop </identifier>
<symbol> = </symbol>
<identifier> true </identifier>
<symbol> ; </symbol>
<identifier> while </identifier>
<symbol> ( </symbol>
<identifier> loop </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> position </identifier>
<symbol> = </symbol>
<identifier> position </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> mask </identifier>
<symbol> = </symbol>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> nextMask </identifier>
<symbol> ( </symbol>
<identifier> mask </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> position </identifier>
<symbol> &gt; </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> value </identifier>
<symbol> &amp; </symbol>
<identifier> mask </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> + </symbol>
<identifier> position </identifier>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> + </symbol>
<identifier> position </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> loop </identifier>
<symbol> = </symbol>
<identifier> false </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> function </identifier>
<identifier> int </identifier>
<identifier> nextMask </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> mask </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> mask </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> return </identifier>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> else </identifier>
<symbol> { </symbol>
<identifier> return </identifier>
<identifier> mask </identifier>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> fillMemory </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> startAddress </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> length </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> while </identifier>
<symbol> ( </symbol>
<identifier> length </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> poke </identifier>
<symbol> ( </symbol>
<identifier> startAddress </identifier>
<symbol> , </symbol>
<identifier> value </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> length </identifier>
<symbol> = </symbol>
<identifier> length </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> startAddress </identifier>
<symbol> = </symbol>
<identifier> startAddress </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>