<tokens>
<identifier> class </identifier>
<identifier> Main </identifier>
<symbol> { </symbol>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> main </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> var </identifier>
<identifier> Array </identifier>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> , </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> b </identifier>
<symbol> [ </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> a </identifier>
<symbol> [ </symbol>
<identifier> b </identifier>
<symbol> [ </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ] </symbol>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> ] </symbol>
<symbol> * </symbol>
<identifier> b </identifier>
<symbol> [ </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 7 </integerConstant>
<symbol> - </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> double </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> c </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> null </identifier>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Test 1: expected result: 5; actual result:  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Test 2: expected result: 40; actual result:  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Test 3: expected result: 0; actual result:  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> c </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> null </identifier>
<symbol> ; </symbol>
<identifier> if </identifier>
<symbol> ( </symbol>
<identifier> c </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> do </identifier>
<identifier> Main </identifier>
<symbol> . </symbol>
<identifier> fill </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> c </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 33 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> c </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> c </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 77 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> b </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> b </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> + </symbol>
<identifier> c </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Test 4: expected result: 77; actual result:  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> c </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Test 5: expected result: 110; actual result:  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> do </identifier>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> function </identifier>
<identifier> int </identifier>
<identifier> double </identifier>
<symbol> ( </symbol>
<identifier> int </identifier>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> return </identifier>
<identifier> a </identifier>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> function </identifier>
<identifier> void </identifier>
<identifier> fill </identifier>
<symbol> ( </symbol>
<identifier> Array </identifier>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> int </identifier>
<identifier> size </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> while </identifier>
<symbol> ( </symbol>
<identifier> size </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> let </identifier>
<identifier> size </identifier>
<symbol> = </symbol>
<identifier> size </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<identifier> let </identifier>
<identifier> a </identifier>
<symbol> [ </symbol>
<identifier> size </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> return </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>