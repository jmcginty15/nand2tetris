@256
D=A
@SP
M=D
@LCL
M=-A
@ARG
M=-A
@THIS
M=-A
@THAT
M=-A
@returnAddress12
D=A
@R13
M=D
@return:Sys.init1
D=A
@pushToStack
0;JMP
(returnAddress12)
@returnAddress13
D=A
@R13
M=D
@LCL
D=M
@pushToStack
0;JMP
(returnAddress13)
@returnAddress14
D=A
@R13
M=D
@ARG
D=M
@pushToStack
0;JMP
(returnAddress14)
@returnAddress15
D=A
@R13
M=D
@THIS
D=M
@pushToStack
0;JMP
(returnAddress15)
@returnAddress16
D=A
@R13
M=D
@THAT
D=M
@pushToStack
0;JMP
(returnAddress16)
@SP
D=M
@LCL
M=D
@5
D=D-A
@ARG
M=D
@Sys.init
0;JMP
(return:Sys.init1)
(Main.fibonacci)
@endPushToStack
0;JMP
(pushToStack)
@SP
A=M
M=D
@SP
M=M+1
@R13
A=M
0;JMP
(endPushToStack)
@returnAddress17
D=A
@R13
M=D
@0
D=A
@ARG
A=D+M
D=M
@pushToStack
0;JMP
(returnAddress17)
@returnAddress18
D=A
@R13
M=D
@2
D=A
@pushToStack
0;JMP
(returnAddress18)
@endPopFromStack
0;JMP
(popFromStack)
@SP
M=M-1
A=M
D=M
@R13
A=M
0;JMP
(endPopFromStack)
@endLt
0;JMP
(lt)
@returnAddress7
D=A
@R13
M=D
@popFromStack
0;JMP
(returnAddress7)
@R15
M=D
@returnAddress8
D=A
@R13
M=D
@R15
D=M
@SP
M=M-1
A=M
D=M-D
@equals
D;JLT
D=0
@enterResult3
0;JMP
(equals)
D=-1
(enterResult3)
@pushToStack
0;JMP
(returnAddress8)
@R14
A=M
0;JMP
(endLt)
@returnAddress19
D=A
@R14
M=D
@lt
0;JMP
(returnAddress19)
@returnAddress20
D=A
@R13
M=D
@popFromStack
0;JMP
(returnAddress20)
@Main.fibonacci$IF_TRUE
D;JNE
@Main.fibonacci$IF_FALSE
0;JMP
(Main.fibonacci$IF_TRUE)
@returnAddress21
D=A
@R13
M=D
@0
D=A
@ARG
A=D+M
D=M
@pushToStack
0;JMP
(returnAddress21)
@endReturn
0;JMP
(return)
@LCL
D=M
@FRAME
M=D
@5
A=D-A
D=M
@RET
M=D
@returnAddress22
D=A
@R13
M=D
@popFromStack
0;JMP
(returnAddress22)
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@FRAME
A=M-1
D=M
@THAT
M=D
@2
D=A
@FRAME
A=M-D
D=M
@THIS
M=D
@3
D=A
@FRAME
A=M-D
D=M
@ARG
M=D
@4
D=A
@FRAME
A=M-D
D=M
@LCL
M=D
@RET
A=M
0;JMP
@R14
A=M
0;JMP
(endReturn)
@returnAddress23
D=A
@R14
M=D
@return
0;JMP
(returnAddress23)
(Main.fibonacci$IF_FALSE)
@returnAddress24
D=A
@R13
M=D
@0
D=A
@ARG
A=D+M
D=M
@pushToStack
0;JMP
(returnAddress24)
@returnAddress25
D=A
@R13
M=D
@2
D=A
@pushToStack
0;JMP
(returnAddress25)
@endSub
0;JMP
(sub)
@returnAddress1
D=A
@R13
M=D
@popFromStack
0;JMP
(returnAddress1)
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
@R14
A=M
0;JMP
(endSub)
@returnAddress26
D=A
@R14
M=D
@sub
0;JMP
(returnAddress26)
@returnAddress27
D=A
@R13
M=D
@return:Main.fibonacci1
D=A
@pushToStack
0;JMP
(returnAddress27)
@returnAddress28
D=A
@R13
M=D
@LCL
D=M
@pushToStack
0;JMP
(returnAddress28)
@returnAddress29
D=A
@R13
M=D
@ARG
D=M
@pushToStack
0;JMP
(returnAddress29)
@returnAddress30
D=A
@R13
M=D
@THIS
D=M
@pushToStack
0;JMP
(returnAddress30)
@returnAddress31
D=A
@R13
M=D
@THAT
D=M
@pushToStack
0;JMP
(returnAddress31)
@SP
D=M
@LCL
M=D
@6
D=D-A
@ARG
M=D
@Main.fibonacci
0;JMP
(return:Main.fibonacci1)
@returnAddress32
D=A
@R13
M=D
@0
D=A
@ARG
A=D+M
D=M
@pushToStack
0;JMP
(returnAddress32)
@returnAddress33
D=A
@R13
M=D
@1
D=A
@pushToStack
0;JMP
(returnAddress33)
@returnAddress34
D=A
@R14
M=D
@sub
0;JMP
(returnAddress34)
@returnAddress35
D=A
@R13
M=D
@return:Main.fibonacci2
D=A
@pushToStack
0;JMP
(returnAddress35)
@returnAddress36
D=A
@R13
M=D
@LCL
D=M
@pushToStack
0;JMP
(returnAddress36)
@returnAddress37
D=A
@R13
M=D
@ARG
D=M
@pushToStack
0;JMP
(returnAddress37)
@returnAddress38
D=A
@R13
M=D
@THIS
D=M
@pushToStack
0;JMP
(returnAddress38)
@returnAddress39
D=A
@R13
M=D
@THAT
D=M
@pushToStack
0;JMP
(returnAddress39)
@SP
D=M
@LCL
M=D
@6
D=D-A
@ARG
M=D
@Main.fibonacci
0;JMP
(return:Main.fibonacci2)
@endAdd
0;JMP
(add)
@returnAddress0
D=A
@R13
M=D
@popFromStack
0;JMP
(returnAddress0)
@SP
M=M-1
A=M
M=D+M
@SP
M=M+1
@R14
A=M
0;JMP
(endAdd)
@returnAddress40
D=A
@R14
M=D
@add
0;JMP
(returnAddress40)
@returnAddress41
D=A
@R14
M=D
@return
0;JMP
(returnAddress41)
(Sys.init)
@returnAddress42
D=A
@R13
M=D
@4
D=A
@pushToStack
0;JMP
(returnAddress42)
@returnAddress43
D=A
@R13
M=D
@return:Main.fibonacci3
D=A
@pushToStack
0;JMP
(returnAddress43)
@returnAddress44
D=A
@R13
M=D
@LCL
D=M
@pushToStack
0;JMP
(returnAddress44)
@returnAddress45
D=A
@R13
M=D
@ARG
D=M
@pushToStack
0;JMP
(returnAddress45)
@returnAddress46
D=A
@R13
M=D
@THIS
D=M
@pushToStack
0;JMP
(returnAddress46)
@returnAddress47
D=A
@R13
M=D
@THAT
D=M
@pushToStack
0;JMP
(returnAddress47)
@SP
D=M
@LCL
M=D
@6
D=D-A
@ARG
M=D
@Main.fibonacci
0;JMP
(return:Main.fibonacci3)
(Sys.init$WHILE)
@Sys.init$WHILE
0;JMP
(terminationLoop)
@terminationLoop
0;JMP